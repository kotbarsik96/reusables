{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	// <HTML>===================================================================================================
	"Import (html)": {
		"prefix": "imp",
		"body": "<!-- @import '' --> ",
	},
	"Value = ": {
		"prefix": "val",
		"body": "value=\"$1\"",
	},
	"Status Dependable Text (temporary, vsevn-ad)": {
		"prefix": "dsdt",
		"body": "data-status-dependable-text=\"applicant::$1 || employer::$2\""
	},
	"SVG with USE": {
		"prefix": "svguse",
		"body": "<svg>\n\t<use xlink:href=\"#$1\"></use>\n</svg>"
	},
	"vsevn - input item": {
		"prefix": "inputitem",
		"body": "<div class=\"input-item\">\n\t<div class=\"input-item__label\">\n\t\t$1\n\t</div>\n\t<div class=\"input-item__content\">\n\t\t$2\n\t</div>\n</div>"
	},
	"text input": {
		"prefix": "textinput",
		"body": "<div class=\"text-input text-input--$1\">\n\t<div class=\"text-input__wrapper\">\n\t\t<input class=\"text-input__input\" id=\"\" name=\"\" type=\"text\">\n\t</div>\n</div>"
	},
	// <CSS>====================================================================================================
	"Not last child": {
		"prefix": "nlt",
		"body": "&:not(:last-child){}"
	},
	"Margin": {
		"prefix": "mg",
		"body": "margin: $1;"
	},
	"Margin top": {
		"prefix": "mmt",
		"body": "margin: $1 0 0 0;",
	},
	"Margin right": {
		"prefix": "mmr",
		"body": "margin: 0 $1 0 0;",
	},
	"Margin bottom": {
		"prefix": "mmb",
		"body": "margin: 0 0 $1 0;",
	},
	"Margin left": {
		"prefix": "mml",
		"body": "margin: 0 0 0 $1;",
	},
	"Padding top": {
		"prefix": "ppt",
		"body": "padding: $1 0 0 0;",
	},
	"Padding right": {
		"prefix": "ppr",
		"body": "padding: 0 $1 0 0;",
	},
	"Padding bottom": {
		"prefix": "ppb",
		"body": "padding: 0 0 $1 0;",
	},
	"Padding left": {
		"prefix": "ppl",
		"body": "padding: 0 0 0 $1;",
	},
	"Backface Visibility": {
		"prefix": "bfv",
		"body": [
			"backface-visibility: hidden;"
		],
	},
	"Box-Sizing: Border Box": {
		"prefix": "bsbb",
		"body": "box-sizing: border-box;",
	},
	"Display Grid": {
		"prefix": "dg",
		"body": "display: grid;",
	},
	"Grid area": {
		"prefix": "ga",
		"body": "grid-area: $1;",
	},
	"Grid column": {
		"prefix": "gc",
		"body": "grid-column: $1;",
	},
	"Grid row": {
		"prefix": "gr",
		"body": "grid-row: $1;",
	},
	"Grid Template Areas": {
		"prefix": "gta",
		"body": "grid-template-areas: $1;",
	},
	"Grid Template Rows": {
		"prefix": "gtr",
		"body": "grid-template-rows: $1;",
	},
	"Grid Template Columns": {
		"prefix": "gtc",
		"body": "grid-template-columns: $1;",
	},
	"Display Flex": {
		"prefix": "df",
		"body": "display: flex;",
	},
	"Flex-Direction Column": {
		"prefix": "fdc",
		"body": "flex-direction: column;",
	},
	"Flex-Direction Row": {
		"prefix": "fdr",
		"body": "flex-direction: row;",
	},
	"Flex-Wrap": {
		"prefix": "fw",
		"body": "flex-wrap: wrap;",
	},
	"Include (css)": {
		"prefix": "inc",
		"body": "@include $1;",
	},
	"@include adaptive()": {
		"prefix": "incad",
		"body": "@include adaptive($1){}"
	},
  "@include breakpoint.xxx()": {
		"prefix": "incbreak",
		"body": "@include breakpoints.$1{}"
	},
	"Media: max": {
		"prefix": "mdmx",
		"body": "@media screen and (max-width: $1px){}",
	},
	"Media: min": {
		"prefix": "mdmn",
		"body": "@media screen and (min-width: $1px){}",
	},
	"Test background": {
		"prefix": "bgtest",
		"body": "background: rgba(255, 255, 255, .5);",
	},
	"Include: line_height": {
		"prefix": "inclh",
		"body": "@include line-height($1);"
	},
	"Include: font_size-line_height": {
		"prefix": "incfz",
		"body": "@include fz-lh($1);"
	},
	"Include: general-font": {
		"prefix": "incgf",
		"body": "@include general-font($1);"
	},
	"Comment CSS": {
		"prefix": "/",
		"body": "/* <$1>================================================================================ */\n$2\n/* </$1>=============================================================================== */"
	},
	"Font Face": {
		"prefix": "fface",
		"body": "@font-face {\n\tfont-family: \"$1\";\n\tsrc: url(\"$2.eot\");\n\tsrc: url(\"$2.eot?#iefix\") format(\"embedded-opentype\"),\n\t\turl(\"$2.woff2\") format(\"woff2\"),\n\t\turl(\"$2.woff\") format(\"woff\"),\n\t\turl(\"$2.ttf\") format(\"truetype\");\n\tfont-weight: normal;\n\tfont-style: normal;\n\tfont-display: swap;\n}"
	},
	"Vue Transition": {
		"prefix": "vuetrans",
		"body": "&-enter-active,\n&-leave-active {\n\ttransition: all 0.3s ease;\n}\n\n&-enter-from,\n&-leave-to {\n}\n\n&-enter-to,\n&-leave-from {\n}"
	},
	// <JavaScript (JS)>===================================================================================
	"Console log": {
		"scope": "javascript,typescript",
		"prefix": "clog",
		"body": "console.log($1);",
	},
	"Console error": {
		"scope": "javascript,typescript",
		"prefix": "cerr",
		"body": "console.error(\"$1\", e.message)"
	},
	"Add Event Listener with arrow function": {
		"scope": "javascript,typescript",
		"prefix": "addevlarrow",
		"body": "addEventListener(\"$1\", ($2) => {\n\t\t$3\n\t}\n)",
	},
	"Add Event Listener with ready function": {
		"scope": "javascript,typescript",
		"prefix": "addevlfunct",
		"body": "addEventListener(\"$1\", $2)"
	},
	"Create function": {
		"scope": "javascript,typescript",
		"prefix": "funct",
		"body": "function $1(){\n\n}"
	},
	"Document QuerySelector": {
		"scope": "javascript,typescript",
		"prefix": "docq",
		"body": "document.querySelector($1)"
	},
	"Document Query-Selector All": {
		"scope": "javascript,typescript",
		"prefix": "docqa",
		"body": "document.querySelectorAll($1)"
	},
	// <TYPESCRIPT (TS)>===================================================================================
	"Export default interface": {
		"scope": "javascript,typescript",
		"prefix": "expdefint",
		"body": "export default interface I",
	},
	// <Vue>===============================================================================================
	"Init vue template": {
		"prefix": "vuetemplate",
		"body": "<template>\n\t\n</template>\n\n<script setup lang=\"ts\">\n\n</script>\n\n<style lang=\"scss\" scoped>\n\t\n</style>"
	},
  "Init vue template 2": {
    "prefix": "vuetemp2",
    "body": "<script setup>\n\n</script>\n\n<template>\n\t\n</template>\n\n<style lang=\"scss\">\n\n</style>"
  },
  "Define props": {
    "prefix": "defprops",
    "body": "const props = defineProps<{\n\t$1\n}>()"
  },
  "Define emits": {
    "prefix": "defemits",
    "body": "const emit = defineEmits<{\n\t(e: $1): void\n}>()"
  },
	// <PHP>===============================================================================================
	"PHP Tag": {
		"prefix": "php",
		"body": "<?php $1 ?>",
	},
	"PHP Short expression": {
		"prefix": "php=",
		"body": "<?= $1 ?>"
	},
	"echo <pre>": {
		"prefix": "echopre",
		"body": "echo '<pre>';\n$1\necho'</pre>';"
	},
	"echo <pre> + var_dump": {
		"prefix": "echoprevardump",
		"body": "echo '<pre>';\nvar_dump($1);\necho'</pre>';"
	},
	"echo <pre> + print_r": {
		"prefix": "echopreprintr",
		"body": "echo '<pre>';\nprint_r($1);\necho'</pre>';"
	},
	"echodump <pre>var_dump()</pre>": {
		"prefix": "echodump",
		"body": "echo '<pre>';\nvar_dump($1);\necho'</pre>';"
	},
	"wrap print_r in echo <pre>": {
		"prefix": "printr",
		"body": "echo '<pre>';\n\tprint_r($$1)\necho'</pre>';"
	},
	"if - endif statement": {
		"prefix": "phpif",
		"body": "<?php if ($1) : ?>\n\t$3\n<?php endif ?>"
	},
	"foreach - endforeach statement": {
		"prefix": "phpforeach",
		"body": "<?php foreach ($$1 as $$2) : ?>\n\t$3\n<?php endforeach ?>"
	},
	"wordpress - get_header + get_footer": {
		"prefix": "getheaderfooter",
		"body": "<?php get_header(); ?>\n\n$1\n\n<?php get_footer(); ?>"
	},
	"error log + print_r": {
		"prefix": "errlog",
		"body": "error_log(print_r($1, true));"
	},
	"laravel log": {
		"prefix": "laralog",
		"body": "\\Illuminate\\Support\\Facades\\Log::info($1);"
	},
	"ob_get_clean": {
		"prefix": "obgetclean",
		"body": "ob_start(); ?>\n\n\t$1\n\n<?php echo ob_get_clean();"
	},
	"public function": {
		"prefix": "pubfc",
		"body": "public function $1()\n{\n\t$2\n}"
	},
	"public static function": {
		"prefix": "pubstfc",
		"body": "public static function $1()\n{\n\t$2\n}"
	},
  "return response 200": {
    "prefix": "returnresponce",
    "body": "return response([\n\t'data' => [$1]\n], 200);"
  }
}